# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  test_pip:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.7

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "test_requirements.txt"}}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            pip install -r test_requirements.txt
            pip install .

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "test_requirements.txt"}}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            pytest tests/ --junitxml=test-reports/coverage_report.xml --cov-config=.coveragerc --cov=neuron_morphology
            codecov -t ${codecov_key}

      - store_artifacts:
          path: test-reports
          destination: test-reports 

  test_conda:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: continuumio/miniconda3:4.7.12

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-conda-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "test_requirements.txt"}}
            # fallback to using the latest cache if no exact match is found
            - v1-conda-dependencies-
      - run:
          name: install dependencies
          command: |
            test ! -d /opt/conda/envs/fenicsproject && \
            conda create -n fenicsproject -c conda-forge fenics mshr python=3.8 && \
            conda init bash
            
            source /root/.bashrc
            conda activate fenicsproject
            pip install -r requirements.txt -U
            pip install -r test_requirements.txt -U
            pip install .
            

      - save_cache:
          paths:
            - /opt/conda/envs/
            - /root/.bashrc
          key: v1-conda-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "test_requirements.txt"}}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            source /root/.bashrc
            conda activate fenicsproject
            pytest tests/ --junitxml=test-reports/coverage_report.xml --cov-config=.coveragerc --cov=neuron_morphology
            codecov -t ${codecov_key}

      - store_artifacts:
          path: test-reports
          destination: test-reports

  deploy_pypi:
    docker:
      - image: circleci/python:3.7
    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: configure pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc

      - run:
          name: setup_venv
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -U twine setuptools wheel

      - run:
          name: check_version
          command: |
            . venv/bin/activate
            python setup.py check_version -e $CIRCLE_TAG

      - run:
          name: build wheels
          command: |
            . venv/bin/activate
            python setup.py sdist
            python setup.py bdist_wheel

      - run:
          name: deploy
          command: |
            . venv/bin/activate
            twine upload dist/* --verbose --config-file ~/.pypirc


workflows:
  version: 2
  test_all:
    jobs:
      - test_pip
      - test_conda
  deploy:
    jobs:
      - test_pip:
          filters:
            tags: 
              only: /v\d+(\.\d+)*(.[A-Za-z][0-9A-Za-z]*)*/
            branches:
              ignore: /.*/
      - test_conda:
          filters:
            tags: 
              only: /v\d+(\.\d+)*(.[A-Za-z][0-9A-Za-z]*)*/
            branches:
              ignore: /.*/
      - deploy_pypi:
          requires:
            - test_pip
            - test_conda
          filters:
            tags: 
              only: /v\d+(\.\d+)*(.[A-Za-z][0-9A-Za-z]*)*/
            branches:
              ignore: /.*/
