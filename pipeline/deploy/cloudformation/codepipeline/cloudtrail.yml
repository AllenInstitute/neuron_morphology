Parameters:
  ProjectName:
    Type: String
    Description: "Used to prefix several resources for uniqueness"

  S3BucketStackName:
    Type: String
    Description: The name of the Cloudformation Stack Containing S3 Buckets

  StepFunctionStackName:
    Type: String
    Description: The name of the step function stack triggered from this cloudtrail

Resources:
  LandingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}-LandingBucket

  TestingLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "TestingLambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "*"
                Resource:
                  - "*"
  TestingLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        S3Bucket: !Ref DeploymentPackageBucket
        S3Key: !Ref DeploymentPackageKey
      Handler: neuron_morphology.validation.validate_reconstruction.main
      Role: !GetAtt TestingLambdaRole.Arn
      Runtime: python3.7
  StateMachineExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: 
                - !Sub "states.${AWS::Region}.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies: 
        - PolicyName: "StateExecutionPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: 
                  - "*"
                Resource: "*"
  SimpleDebugFn:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StateMachineExecutionRole.Arn
      DefinitionString: !Sub
        - |
          {
            "Comment": "A simple machine for debugging ecs",
            "StartAt": "FirstState",
            "States": {
              "FirstState": {
                "Type": "Task",
                "Resource": "arn:aws:states:::ecs:runTask.sync",
                "Parameters": {
                  "Cluster": "${EcsArn}",
                  "LaunchType": "FARGATE",
                  "TaskDefinition": "${DummyEcsTask}",
                  "NetworkConfiguration": {
                    "AwsvpcConfiguration": {
                      "Subnets": ["${PrivateSubnet}"],
                      "SecurityGroups": ["${ContainerSecurityGroup}"]
                    }
                  }
                },
                "Next": "SecondState"
              },
              "SecondState": {
                "Type": "Task",
                "Resource": "${TestingLambda}",
                "End": true
              }
            }
          }
        - EcsArn: !GetAtt Cluster.Arn
          DummyEcsTask: !Ref DummyTask
          EcsSubnet: !Ref PrivateSubnet
          ContainerSecurityGroup: !Ref ContainerSecurityGroup
          TestingLambda: !GetAtt TestingLambda.Arn
      
  CloudTrailBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}-cloud-trail

  CloudTrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudTrailBucket
      PolicyDocument:
        Statement:
        - Action:
          - "s3:ListBucket"
          - "s3:GetBucketAcl"
          Effect: "Allow"
          Principal:
            Service: "cloudtrail.amazonaws.com"
          Resource: !GetAtt CloudTrailBucket.Arn
        - Action: "*"
          Effect: "Allow"
          Principal:
            Service: "cloudtrail.amazonaws.com"
          Resource: !Sub "arn:aws:s3:::${CloudTrailBucket}/*"
    DependsOn: CloudTrailBucket

  StepFuncTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
              - "cloudwatch.amazonaws.com"
              - "events.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
      - PolicyName: "StepFuncTriggerRole"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "*"
              Resource: "*"
  CloudTrail:
    Type: AWS::CloudTrail::Trail
    Properties:
      TrailName: !Sub ${ProjectName}-CloudTrail
      S3BucketName: !Ref CloudTrailBucket
      IsLogging: true
      EventSelectors:
        - DataResources:
            - Type: AWS::S3::Object
              Values:
              - !Sub
                  - "arn:aws:s3:::${BucketName}/"
                  - BucketName: 
                      'Fn::ImportValue': !Sub '${ProjectName}-LandingBucket'
    DependsOn: CloudTrailBucketPolicy

  CloudWatchRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${ProjectName}-CloudWatch-Rule
      RoleArn: !GetAtt StepFuncTriggerRole.Arn
      EventPattern:
        source:
        - aws.s3
        detail-type:
        - 'AWS API Call via CloudTrail'
        detail:
          eventSource:
              - s3.amazonaws.com
          eventName:
              - CopyObject
              - PutObject
              - CompleteMultipartUpload
          requestParameters:
              bucketName:
              - Fn::ImportValue: !Sub "${ProjectName}-LandingBucket"
      Targets:
      - Arn: 
          Fn::ImportValue: "SimpleDebugFn"
        RoleArn: !GetAtt StepFuncTriggerRole.Arn
        Id: "StepFunctionTrigger"