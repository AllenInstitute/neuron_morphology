Parameters:

  ImageUri:
    Type: String
    Description: ECS tasks should pull this docker image

  DeploymentPackageBucket:
    Type: String
    Description: Lambda deployment packages hosted here.

  DeploymentPackageKey:
    Type: String
    Description: Use this package for lambdas that need neuron_morphology

Resources:

  # The working bucket stores data currently being processed.
  WorkingBucket:
    Type: AWS::S3::Bucket
  
  # The landing bucket provides a data entry point to the pipeline. Whenever a data package is 
  # uploaded to this bucket, CloudWatch will set off the pipeline state machine.
  LandingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-landing-bucket
      
  # Below are resources related to ECS, which is used for running some stages of the pipelien
  EcsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-ecs"
      RetentionInDays: 60

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: "AWS::Region"}
      CidrBlock: '10.0.10.0/24'
      MapPublicIpOnLaunch: false

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-container-sg"
      GroupDescription: Security group for containers
      VpcId: !Ref Vpc

  VpcEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-vpce-sg"
      GroupDescription: Group for PrivateLink access to other AWS services
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt ContainerSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref Vpc
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - "s3:*"
            Resource: 
              - "*"
      RouteTableIds:
        - !Ref PrivateRouteTable
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"

  EcrApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref Vpc
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt VpcEndpointSecurityGroup.GroupId
      SubnetIds:
        - !Ref PrivateSubnet
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecr.api"

  EcrDockerApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref Vpc
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt VpcEndpointSecurityGroup.GroupId
      SubnetIds:
        - !Ref PrivateSubnet
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecr.dkr"

  LogsApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref Vpc
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt VpcEndpointSecurityGroup.GroupId
      SubnetIds:
        - !Ref PrivateSubnet
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.logs"

  Cluster:
    Type: AWS::ECS::Cluster

  ContainerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action: 
              - sts:AssumeRole
      Policies:
        - PolicyName: ContainerExecutionPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  LandingTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: !Ref ImageUri
          Command: ["/bin/sh -c \"conda run -n py37 /neuron_morphology/pipeline/commands/landing.py\""]
          EntryPoint: ["sh", "-c"]
          Name: landing-container
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "${AWS::StackName}-ecs"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: landing-task
      Cpu: 1024
      ExecutionRoleArn: !GetAtt ContainerExecutionRole.Arn
      Family: landing-task
      Memory: 8192
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc

  # below are lambda resources, used for running some stages of the pipeline
  TestingLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "TestingLambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "*"
                Resource:
                  - "*"

  TestingLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        S3Bucket: !Ref DeploymentPackageBucket
        S3Key: !Ref DeploymentPackageKey
      Handler: neuron_morphology.validation.validate_reconstruction.main
      Role: !GetAtt TestingLambdaRole.Arn
      Runtime: python3.7

  # below are resources related to our state machine itself
  StateMachineExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: 
                - !Sub "states.${AWS::Region}.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies: 
        - PolicyName: "StateExecutionPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: 
                  - "*"
                Resource: "*"

  Pipeline:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StateMachineExecutionRole.Arn
      DefinitionString: !Sub
        - |
          {
            "Comment": "Executes the pipeline",
            "StartAt": "Landing",
            "States": {
              "Landing": {
                "Type": "Task",
                "Resource": "arn:aws:states:::ecs:runTask.waitForTaskToken",
                "Parameters": {
                  "Cluster": "${EcsArn}",
                  "LaunchType": "FARGATE",
                  "TaskDefinition": "${LandingEcsTask}",
                  "Overrides": {
                    "ContainerOverrides": {
                      "Environment": [
                        {
                          "name": "TASK_TOKEN",
                          "value.$": "$$.Task.Token"
                        },
                        {
                          "name": "WORKING_BUCKET",
                          "value.$": "${WorkingBucket}" 
                        },
                        {
                          "name": "LANDING_BUCKET",
                          "value.$": "$detail.requestParameters.bucketName"
                        },
                        {
                          "name": "UPLOAD_PACKAGE_KEY",
                          "value.$": "$detail.requestParameters.key"
                        }
                      ]
                    }
                  },
                  "NetworkConfiguration": {
                    "AwsvpcConfiguration": {
                      "Subnets": ["${PrivateSubnet}"],
                      "SecurityGroups": ["${ContainerSecurityGroup}"]
                    }
                  }
                },
                "Next": "SecondState",
                "ResultPath": "landing"
              },
              "SecondState": {
                "Type": "Task",
                "Resource": "${TestingLambda}",
                "End": true
              }
            }
          }
        - EcsArn: !GetAtt Cluster.Arn
          LandingEcsTask: !Ref LandingTask
          EcsSubnet: !Ref PrivateSubnet
          ContainerSecurityGroup: !Ref ContainerSecurityGroup
          TestingLambda: !GetAtt TestingLambda.Arn
          WorkingBucket: !Ref WorkingBucket

  # below are resources for triggering the state machine when data is posted to the landing bucket

  # a bucket for holding logs
  CloudTrailBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-cloud-trail

  CloudTrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudTrailBucket
      PolicyDocument:
        Statement:
        - Action:
          - "s3:ListBucket"
          - "s3:GetBucketAcl"
          Effect: "Allow"
          Principal:
            Service: "cloudtrail.amazonaws.com"
          Resource: !GetAtt CloudTrailBucket.Arn
        - Action: "*"
          Effect: "Allow"
          Principal:
            Service: "cloudtrail.amazonaws.com"
          Resource: !Sub "arn:aws:s3:::${CloudTrailBucket}/*"
    DependsOn: CloudTrailBucket

  # we need a role that can trigger our state machine
  StepFuncTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
              - "cloudwatch.amazonaws.com"
              - "events.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
      - PolicyName: "StepFuncTriggerRole"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "*"
              Resource: "*"

  # monitors the landing bucket
  CloudTrail:
    Type: AWS::CloudTrail::Trail
    Properties:
      TrailName: !Sub ${AWS::StackName}-CloudTrail
      S3BucketName: !Ref CloudTrailBucket
      IsLogging: true
      EventSelectors:
        - DataResources:
            - Type: AWS::S3::Object
              Values:
                - Fn::Sub:
                  - "arn:aws:s3:::${BucketName}/"
                  - BucketName: !Ref LandingBucket
    DependsOn: CloudTrailBucketPolicy

  # Trigger the state machine 
  CloudWatchRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${AWS::StackName}-CloudWatch-Rule
      RoleArn: !GetAtt StepFuncTriggerRole.Arn
      EventPattern:
        source:
        - aws.s3
        detail-type:
        - 'AWS API Call via CloudTrail'
        detail:
          eventSource:
              - s3.amazonaws.com
          eventName:
              - CopyObject
              - PutObject
              - CompleteMultipartUpload
          requestParameters:
              bucketName:
                - !Ref LandingBucket
      Targets:
        - Arn: !Ref Pipeline
          RoleArn: !GetAtt StepFuncTriggerRole.Arn
          Id: "StepFunctionTrigger"

Outputs:
  LandingBucketRef:
    Value: !Ref LandingBucket
    Export:
      Name: !Sub ${AWS::StackName}-S3-LandingBucket